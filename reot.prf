(treo
 (str_nth1_TCC1 0
  (str_nth1_TCC1-1 nil 3712123863 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (str_nth1_TCC2 0
  (str_nth1_TCC2-1 nil 3712123863 ("" (termination-tcc) nil nil) nil
   nil))
 (Inc_UT 0
  (Inc_UT-1 nil 3740760305 ("" (postpone) nil nil) nil shostak))
 (Teqtn_TCC1 0
  (Teqtn_TCC1-1 nil 3718532493 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Teqtn_TCC2 0
  (Teqtn_TCC2-1 nil 3718532493 ("" (termination-tcc) nil nil) nil nil))
 (eqtltt 0
  (eqtltt-1 nil 3712123869
   ("" (skosimp)
    (("" (expand "Tltt")
      (("" (expand "b2n") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((b2n const-decl "nbit" bit nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Tltt const-decl "bool" treo nil))
   shostak))
 (eqteqt 0
  (eqteqt-1 nil 3712124119
   ("" (skosimp)
    (("" (expand "Teqt")
      (("" (expand "b2n") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((b2n const-decl "nbit" bit nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Teqt const-decl "bool" treo nil))
   shostak))
 (teqttltt 0
  (teqttltt-1 nil 3712124314
   ("" (skosimp)
    (("" (expand "Teqt")
      (("" (expand "Tle")
        (("" (expand "Tltt")
          (("" (skosimp)
            (("" (expand "b2n")
              (("" (inst?)
                (("" (assert)
                  (("" (typepred "<")
                    (("" (expand "strict_order?")
                      (("" (flatten)
                        (("" (expand "transitive?")
                          (("" (assert) (("" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (str_nth const-decl "TD" treo nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b2n const-decl "nbit" bit nil) (Tltt const-decl "bool" treo nil)
    (Teqt const-decl "bool" treo nil))
   shostak))
 (eq_transfer 0
  (eq_transfer-1 nil 3712124875
   ("" (skosimp)
    (("" (expand "Teq")
      (("" (expand "Teqt")
        (("" (expand "str_nth")
          (("" (expand "nth")
            (("" (expand "b2n")
              (("" (expand "FrS") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Teqt const-decl "bool" treo nil) (b2n const-decl "nbit" bit nil)
    (str_nth const-decl "TD" treo nil))
   shostak))
 (eq_tran 0
  (eq_tran-1 nil 3726319466
   ("" (skosimp)
    (("" (expand "Teqt")
      (("" (skosimp)
        (("" (expand "str_nth")
          (("" (expand "nth")
            (("" (expand "FrS") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Teqt const-decl "bool" treo nil)
    (str_nth const-decl "TD" treo nil) nil nil)
   shostak))
 (leq_tra 0
  (leq_tra-1 nil 3726319501
   ("" (skosimp)
    (("" (expand "Tltt")
      (("" (skosimp) (("" (expand "FrS") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Tltt const-decl "bool" treo nil) nil) shostak))
 (tg_tran 0
  (tg_tran-1 nil 3726319530
   ("" (skosimp)
    (("" (expand "Tgtt")
      (("" (skosimp)
        (("" (typepred "t!1")
          (("" (expand "FrS") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Tgtt const-decl "bool" treo nil) nil
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil)
   shostak))
 (merge_transfer 0
  (merge_transfer-1 nil 3712125074
   ("" (skosimp)
    (("" (expand "Merge")
      (("" (expand "Teqt")
        (("" (expand "next")
          (("" (expand "b2n")
            (("" (inst?)
              (("" (skosimp)
                (("" (expand "FrS") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Teqt const-decl "bool" treo nil) (b2n const-decl "nbit" bit nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (LB_fifo1 0
  (LB_fifo1-1 nil 3712371939
   ("" (skosimp)
    (("" (expand "Timert")
      (("" (expand "Fifo1")
        (("" (expand "SyncD")
          (("" (expand "Sync")
            (("" (expand "next")
              (("" (expand "Tle")
                (("" (expand "Teq")
                  (("" (expand "Deq")
                    (("" (flatten)
                      (("" (split)
                        (("1" (inst -1 "t!1")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (expand "Tltt")
                          (("2" (skosimp) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Timert const-decl "bool" treo nil)
    (Tltt const-decl "bool" treo nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Teqt const-decl "bool" treo nil) (b2n const-decl "nbit" bit nil)
    (str_nth const-decl "TD" treo nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (timed_fifo 0
  (timed_fifo-1 nil 3712372712
   ("" (skosimp)
    (("" (expand "Fifo1")
      (("" (expand "Sync")
        (("" (expand "SyncD")
          (("" (expand "Teqt")
            (("" (expand "Tle")
              (("" (expand "Teq")
                (("" (expand "Deq")
                  (("" (assert)
                    (("" (flatten)
                      (("" (split)
                        (("1" (skosimp)
                          (("1" (expand "str_nth")
                            (("1" (expand "nth")
                              (("1"
                                (expand "FrS")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "next")
                          (("2" (assert)
                            (("2" (expand "str_nth")
                              (("2"
                                (expand "nth")
                                (("2"
                                  (expand "FrS")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil nil nil nil nil nil (str_nth const-decl "TD" treo nil) nil
    (Teqt const-decl "bool" treo nil) nil)
   shostak))
 (timed_fifon1 0
  (timed_fifon1-1 nil 3724557925
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "Fifon")
        (("1" (expand "Fifo1")
          (("1" (expand "Sync")
            (("1" (expand "SyncD")
              (("1" (expand "Ttimern")
                (("1" (expand "Teqtn")
                  (("1" (expand "Tlen")
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand Fifon -2)
        (("2" (expand Ttimern -5)
          (("2" (skosimp)
            (("2" (inst?)
              (("2" (assert)
                (("2" (skosimp*)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil) nil
    (sequence type-eq-decl nil sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) nil nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil) nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil nil nil nil (Ttimern def-decl "bool" treo nil)
    (Teqtn def-decl "bool" treo nil) nil
    (Tlen def-decl "bool" treo nil) nil
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (Timert const-decl "bool" treo nil) nil
    (Teqt const-decl "bool" treo nil) (b2n const-decl "nbit" bit nil)
    nil (str_nth const-decl "TD" treo nil) nil nil nil
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (expire_fifo 0
  (expire_fifo-1 nil 3712373381
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand Fifo1 -3)
        (("1" (expand "Lossysync")
          (("1" (expand "Sync")
            (("1" (expand "SyncD")
              (("1" (expand "Timert")
                (("1" (expand "Teq")
                  (("1" (expand "Teqt")
                    (("1" (expand "Tgt")
                      (("1" (assert)
                        (("1" (split)
                          (("1" (skosimp)
                            (("1" (inst? -10)
                              (("1"
                                (skosimp)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst? -5)
                              (("2"
                                (skosimp)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst? -1)
        (("2" (expand "Fifo1")
          (("2" (assert)
            (("2" (expand "Teqt")
              (("2" (expand "Tgt")
                (("2" (skosimp)
                  (("2" (assert)
                    (("2" (split)
                      (("1" (skosimp)
                        (("1" (typepred "t!1")
                          (("1" (inst? -3)
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred ">")
                          (("2" (expand "strict_order?")
                            (("2" (flatten)
                              (("2"
                                (expand "transitive?")
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil nil (b2n const-decl "nbit" bit nil) nil
    (str_nth const-decl "TD" treo nil) nil nil
    (strict_order? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil) nil
    (Teqt const-decl "bool" treo nil) nil nil
    (Timert const-decl "bool" treo nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil) nil
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nt_connector 0
  (nt_connector-1 nil 3712372486
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "Lossysync")
        (("1" (expand "Merge")
          (("1" (expand "Sync")
            (("1" (expand "SyncD")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (split)
                    (("1" (expand "next")
                      (("1" (expand "suffix")
                        (("1" (expand "nth")
                          (("1" (expand "Teqt")
                            (("1" (assert)
                              (("1"
                                (skosimp)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "str_nth")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "Teqt")
                      (("2" (skosimp)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "Teqt")
        (("2" (inst?)
          (("2" (inst?)
            (("2" (inst?)
              (("2" (inst?)
                (("2" (inst?)
                  (("2" (skosimp)
                    (("2" (assert)
                      (("2" (split)
                        (("1" (inst?) nil nil)
                         ("2" (typepred "j!1")
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil)
                         ("3" (assert) (("3" (grind) nil nil)) nil)
                         ("4" (assert) (("4" (grind) nil nil)) nil)
                         ("5" (assert) (("5" (grind) nil nil)) nil)
                         ("6" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Timert const-decl "bool" treo nil)
    (Teqt const-decl "bool" treo nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (str_nth const-decl "TD" treo nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (b2n const-decl "nbit" bit nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak)))

