(reou
 (lessp_TCC1 0
  (lessp_TCC1-1 nil 3728620511
   ("" (inst 1 "lambda (x, y: sequence[Time]): false")
    (("" (grind) nil nil)) nil)
   ((irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (FALSE const-decl "bool" booleans nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil reou nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (greaterp_TCC1 0
  (greaterp_TCC1-1 nil 3728620511
   ("" (expand "strict_order?")
    (("" (typepred "<")
      (("" (expand "strict_order?")
        (("" (flatten)
          (("" (split)
            (("1" (expand "irreflexive?") (("1" (propax) nil nil)) nil)
             ("2" (expand "transitive?")
              (("2" (skeep)
                (("2" (inst -4 "z" "y" "x") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "(strict_order?[sequence[Time]])" reou nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil reou nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil))
   nil))
 (Fifon_TCC1 0
  (Fifon_TCC1-1 nil 3728620511 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Fifon_TCC2 0
  (Fifon_TCC2-1 nil 3728620511 ("" (termination-tcc) nil nil) nil nil))
 (trans_equal 0
  (trans_equal-1 nil 3728620726
   ("" (skosimp) (("" (expand "Teq") (("" (assert) nil nil)) nil)) nil)
   ((Teq const-decl "bool" reou nil)) shostak))
 (trans_equal2 0
  (trans_equal2-1 nil 3728620822
   ("" (skosimp)
    (("" (expand "Teq")
      (("" (expand "next") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((Teq const-decl "bool" reou nil) (next const-decl "TD" reou nil))
   shostak))
 (trans_equal3 0
  (trans_equal3-1 nil 3728620854
   ("" (skeep)
    (("" (expand "Tle")
      (("" (typepred "<")
        (("" (expand "strict_order?")
          (("" (flatten)
            (("" (expand "transitive?")
              (("" (inst -2 "T(s1)" "T(s2)" "T(s3)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tle const-decl "bool" reou nil)
    (transitive? const-decl "bool" relations nil)
    (Data nonempty-type-decl nil reou nil)
    (TD type-eq-decl nil reou nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (Time type-eq-decl nil reou nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_order? const-decl "bool" orders nil)
    (< const-decl "(strict_order?[sequence[Time]])" reou nil))
   shostak))
 (trans_equal4 0
  (trans_equal4-1 nil 3728620934
   ("" (skeep)
    (("" (expand "Tgt")
      (("" (typepred ">")
        (("" (expand "strict_order?")
          (("" (flatten)
            (("" (expand "transitive?")
              (("" (inst -2 "T(s1)" "T(s2)" "T(s3)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "(strict_order?[sequence[Time]])" reou nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil reou nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Data nonempty-type-decl nil reou nil)
    (TD type-eq-decl nil reou nil)
    (transitive? const-decl "bool" relations nil)
    (Tgt const-decl "bool" reou nil))
   shostak))
 (trans_equal5 0
  (trans_equal5-1 nil 3728621027
   ("" (skosimp) (("" (expand "Deq") (("" (assert) nil nil)) nil)) nil)
   ((Deq const-decl "bool" reou nil)) shostak))
 (trans_equal6 0
  (trans_equal6-1 nil 3740702205
   ("" (skosimp)
    (("" (expand "Sync")
      (("" (expand "Teq")
        (("" (expand "Deq")
          (("" (flatten)
            (("" (split)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Teq const-decl "bool" reou nil) (Deq const-decl "bool" reou nil)
    (Sync const-decl "bool" reou nil))
   shostak))
 (L6 0
  (L6-1 nil 3740702402
   ("" (skosimp)
    (("" (expand "Fifo1")
      (("" (expand "Tle")
        (("" (expand "Deq")
          (("" (expand "Tgt")
            (("" (assert)
              (("" (flatten)
                (("" (typepred ">")
                  (("" (expand "strict_order?")
                    (("" (expand "irreflexive?")
                      (("" (expand "transitive?")
                        (("" (assert)
                          (("" (grind) (("" (postpone) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (T1 0
  (T1-1 nil 3728621090
   ("" (skosimp)
    (("" (expand "Sync")
      (("" (expand "Fifo1")
        (("" (expand "Teq")
          (("" (expand "Deq")
            (("" (expand "Tle")
              (("" (expand "next")
                (("" (flatten)
                  (("" (split)
                    (("1" (assert) nil nil) ("2" (propax) nil nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sync const-decl "bool" reou nil) (Teq const-decl "bool" reou nil)
    (Tle const-decl "bool" reou nil) (next const-decl "TD" reou nil)
    (Deq const-decl "bool" reou nil)
    (Fifo1 const-decl "bool" reou nil))
   shostak))
 (fto 0
  (fto-1 nil 3728621188
   ("" (skosimp)
    (("" (expand "Sync")
      (("" (expand "Join")
        (("" (expand "Teq")
          (("" (expand "Deq")
            (("" (assert)
              (("" (flatten)
                (("" (split)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sync const-decl "bool" reou nil) (Teq const-decl "bool" reou nil)
    (Deq const-decl "bool" reou nil) (Join const-decl "bool" reou nil))
   shostak))
 (tcr 0
  (tcr-1 nil 3728621238
   ("" (skosimp)
    (("" (expand "Sync")
      (("" (expand "Join")
        (("" (expand "Teq")
          (("" (expand "Deq")
            (("" (assert)
              (("" (flatten)
                (("" (split)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)
                   ("3" (assert) nil nil) ("4" (assert) nil nil)
                   ("5" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Join const-decl "bool" reou nil) (Deq const-decl "bool" reou nil)
    (Teq const-decl "bool" reou nil) (Sync const-decl "bool" reou nil))
   shostak))
 (wcr 0
  (wcr-1 nil 3728621296
   ("" (skosimp)
    (("" (expand "Sync")
      (("" (expand "Join")
        (("" (expand "SyncD")
          (("" (expand "Teq")
            (("" (expand "Deq")
              (("" (assert)
                (("" (flatten)
                  (("" (split)
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Join const-decl "bool" reou nil) (Teq const-decl "bool" reou nil)
    (Deq const-decl "bool" reou nil) (SyncD const-decl "bool" reou nil)
    (Sync const-decl "bool" reou nil))
   shostak))
 (ex52new 0
  (ex52new-1 nil 3728621374
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "Sync")
        (("1" (expand "Lossysync")
          (("1" (expand "SyncD")
            (("1" (expand "next")
              (("1" (expand "suffix")
                (("1" (expand "Teq")
                  (("1" (expand "Deq")
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst -1 "A!1" "B!1" "C!1" "D!1" "E!1" "F!1" "G!1")
        (("2" (expand "Lossysync")
          (("2" (expand "Sync")
            (("2" (expand "SyncD")
              (("2" (expand "next")
                (("2" (expand "suffix")
                  (("2" (expand "nth")
                    (("2" (expand "Teq")
                      (("2" (expand "Deq")
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth const-decl "T" sequences nil) (next const-decl "TD" reou nil)
    (Deq const-decl "bool" reou nil)
    (suffix const-decl "sequence" sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Teq const-decl "bool" reou nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (SyncD const-decl "bool" reou nil)
    (Lossysync inductive-decl "bool" reou nil)
    (Sync const-decl "bool" reou nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TD type-eq-decl nil reou nil) (Time type-eq-decl nil reou nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil reou nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (seq 0
  (seq-1 nil 3728621652
   ("" (skosimp)
    (("" (expand "sequencer")
      (("" (expand "Tle")
        (("" (expand "Deq")
          (("" (expand "Fifo1e")
            (("" (expand "next")
              (("" (expand "Sync")
                (("" (expand "suffix")
                  (("" (assert)
                    (("" (typepred "<")
                      (("" (expand "strict_order?")
                        (("" (expand "irreflexive?")
                          (("" (expand "transitive?")
                            (("" (flatten)
                              ((""
                                (assert)
                                (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequencer const-decl "bool" reou nil)
    (Deq const-decl "bool" reou nil) (next const-decl "TD" reou nil)
    (suffix const-decl "sequence" sequences nil)
    (< const-decl "(strict_order?[sequence[Time]])" reou nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil reou nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (irreflexive? const-decl "bool" relations nil)
    (TD type-eq-decl nil reou nil)
    (Data nonempty-type-decl nil reou nil)
    (Fifo1 const-decl "bool" reou nil) (Teq const-decl "bool" reou nil)
    (e? const-decl "bool" reou nil) (nth const-decl "TD" reou nil)
    (Tgt const-decl "bool" reou nil)
    (> const-decl "(strict_order?[sequence[Time]])" reou nil)
    (transitive? const-decl "bool" relations nil)
    (Sync const-decl "bool" reou nil)
    (Fifo1e const-decl "bool" reou nil)
    (Tle const-decl "bool" reou nil))
   shostak))
 (lemma7 0
  (lemma7-1 nil 3728621750
   ("" (skosimp)
    (("" (expand "Sync")
      (("" (expand "Teq")
        (("" (expand "Deq") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Sync const-decl "bool" reou nil) (Deq const-decl "bool" reou nil)
    (Teq const-decl "bool" reou nil))
   shostak))
 (T2LI 0
  (T2LI-1 nil 3728621769
   ("" (skosimp)
    (("" (expand "SyncD")
      (("" (expand "Teq")
        (("" (expand "Fifo1")
          (("" (expand "Tle")
            (("" (expand "next")
              (("" (expand "Sync")
                (("" (expand "Deq")
                  (("" (flatten)
                    (("" (assert)
                      (("" (typepred "<")
                        (("" (expand "strict_order?")
                          (("" (expand "irreflexive?")
                            (("" (expand "transitive?")
                              ((""
                                (flatten)
                                ((""
                                  (inst?)
                                  ((""
                                    (inst?)
                                    ((""
                                      (assert)
                                      (("" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SyncD const-decl "bool" reou nil)
    (Fifo1 const-decl "bool" reou nil) (next const-decl "TD" reou nil)
    (Deq const-decl "bool" reou nil)
    (transitive? const-decl "bool" relations nil)
    (TD type-eq-decl nil reou nil)
    (Data nonempty-type-decl nil reou nil)
    (suffix const-decl "sequence" sequences nil)
    (irreflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (Time type-eq-decl nil reou nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_order? const-decl "bool" orders nil)
    (< const-decl "(strict_order?[sequence[Time]])" reou nil)
    (Sync const-decl "bool" reou nil) (Tle const-decl "bool" reou nil)
    (Teq const-decl "bool" reou nil))
   shostak))
 (R3LI 0
  (R3LI-1 nil 3728621853
   ("" (skosimp)
    (("" (skolem!)
      (("" (inst?)
        (("" (expand "Fifo1")
          (("" (expand "Sync")
            (("" (expand "Tle")
              (("" (expand "next")
                (("" (expand "Teq")
                  (("" (expand "Deq")
                    (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fifo1 const-decl "bool" reou nil) (Tle const-decl "bool" reou nil)
    (Teq const-decl "bool" reou nil) (Deq const-decl "bool" reou nil)
    (next const-decl "TD" reou nil) (Sync const-decl "bool" reou nil)
    (TD type-eq-decl nil reou nil) (Time type-eq-decl nil reou nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil reou nil))
   shostak))
 (ordering 0
           (ordering-1 nil 3728621971
            ("" (skosimp)
             (("" (assert)
               (("" (expand "Sync")
                 (("" (expand "SyncD")
                   (("" (expand "Fifo1")
                     (("" (expand "next")
                       (("" (expand "suffix")
                         (("" (expand "Teq")
                           (("" (expand "Deq")
                             (("" (expand "Tle")
                               ((""
                                 (assert)
                                 ((""
                                   (flatten)
                                   ((""
                                     (typepred "<")
                                     ((""
                                       (expand "strict_order?")
                                       ((""
                                         (expand "transitive?")
                                         ((""
                                           (expand "irreflexive?")
                                           (("" (assert) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ((SyncD const-decl "bool" reou nil)
             (next const-decl "TD" reou nil)
             (Teq const-decl "bool" reou nil)
             (Tle const-decl "bool" reou nil)
             (irreflexive? const-decl "bool" relations nil)
             (transitive? const-decl "bool" relations nil)
             (boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (nonneg_real nonempty-type-eq-decl nil real_types nil)
             (> const-decl "bool" reals nil)
             (Time type-eq-decl nil reou nil)
             (sequence type-eq-decl nil sequences nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_order? const-decl "bool" orders nil)
             (< const-decl "(strict_order?[sequence[Time]])" reou nil)
             (Deq const-decl "bool" reou nil)
             (suffix const-decl "sequence" sequences nil)
             (Fifo1 const-decl "bool" reou nil)
             (Sync const-decl "bool" reou nil))
            shostak))
 (gn 0
  (gn-1 nil 3728622035
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (assert)
        (("1" (expand "Fifon")
          (("1" (expand "Fifo1")
            (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skosimp*)
        (("2" (expand Fifon -2)
          (("2" (skosimp)
            (("2" (inst - s1!1 s3!1)
              (("2" (assert)
                (("2" (expand "Fifo1")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (expand "Deq")
                        (("2" (assert)
                          (("2" (hide-all-but (-1 -4 1))
                            (("2" (expand "Tle")
                              (("2"
                                (typepred "<")
                                (("2"
                                  (expand "strict_order?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "transitive?")
                                      (("2"
                                        (inst
                                         -
                                         "T(s1!1)"
                                         "T(s3!1)"
                                         "T(s2!1)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" relations nil)
    (< const-decl "(strict_order?[sequence[Time]])" reou nil)
    (strict_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fifo1 const-decl "bool" reou nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Deq const-decl "bool" reou nil) (Tle const-decl "bool" reou nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Fifon def-decl "bool" reou nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TD type-eq-decl nil reou nil) (Time type-eq-decl nil reou nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil reou nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (g1 0
  (g1-1 nil 3728622240
   ("" (skosimp) (("" (expand "Fifon") (("" (propax) nil nil)) nil))
    nil)
   ((Fifon def-decl "bool" reou nil)) shostak)))

